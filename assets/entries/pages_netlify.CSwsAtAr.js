import{j as e,L as r,o as i,i as n}from"../chunks/chunk-DDL8FpfR.js";import{S as l,a as s,b as d}from"../chunks/chunk-DsszZI6D.js";import{L as p}from"../chunks/chunk-DWKnVLy7.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */import"../chunks/chunk-B--HK5tK.js";/* empty css                      */const u=[];function a(t){const o={a:"a",blockquote:"blockquote",p:"p",...t.components};return e.jsxs(e.Fragment,{children:[e.jsx(l,{staticHostLink:e.jsxs(e.Fragment,{children:[", such as ",e.jsx(o.a,{href:"https://www.netlify.com/",children:"Netlify"})]})}),`
`,e.jsxs(o.blockquote,{children:[`
`,e.jsxs(o.p,{children:["For deploying SSR, see ",e.jsx(p,{href:"/netlify-functions"}),"."]}),`
`]}),`
`,e.jsx(s,{}),`
`,e.jsx(d,{})]})}function c(t={}){const{wrapper:o}=t.components||{};return o?e.jsx(o,{...t,children:e.jsx(a,{...t})}):a(t)}const f=Object.freeze(Object.defineProperty({__proto__:null,default:c,pageSectionsExport:u},Symbol.toStringTag,{value:"Module"})),g={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},Layout:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/Layout",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:r}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:i}},NavHeader:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/+NavHeader.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:n}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/netlify/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:f}}};export{g as configValuesSerialized};
