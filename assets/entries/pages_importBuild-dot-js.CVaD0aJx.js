import{j as e,L as i,o as a}from"../chunks/chunk-BDl3L7LG.js";import{L as n}from"../chunks/chunk-C57YDwx2.js";/* empty css                      */import{W as d}from"../chunks/chunk-BvVMv946.js";/* empty css                      *//* empty css                      *//* empty css                      */import"../chunks/chunk-u42NeO_H.js";/* empty css                      *//* empty css                      */const l=[];function r(o){const t={blockquote:"blockquote",code:"code",p:"p",...o.components};return e.jsxs(e.Fragment,{children:[e.jsxs(d,{children:[e.jsx(t.code,{children:"dist/server/importBuild.js"})," is outdated and not needed anymore."]}),`
`,e.jsxs(t.blockquote,{children:[`
`,e.jsxs(t.p,{children:["There are still some (rare) situations when we need to manually import the ",e.jsx(t.code,{children:"dist/server/"})," files, see ",e.jsx(n,{href:"/importBuild.cjs"}),"."]}),`
`]})]})}function s(o={}){const{wrapper:t}=o.components||{};return t?e.jsx(t,{...o,children:e.jsx(r,{...o})}):r(o)}const p=Object.freeze(Object.defineProperty({__proto__:null,default:s,pageSectionsExport:l},Symbol.toStringTag,{value:"Module"})),T={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},Layout:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/Layout",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:i}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:a}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/importBuild-dot-js/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:p}}};export{T as configValuesSerialized};
